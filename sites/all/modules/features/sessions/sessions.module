<?php
/**
 * @file
 * Code for the Sessions feature.
 */

include_once('sessions.features.inc');
define('SESSIONS_CTYPE', 'session');


/**
 * Implements hook_permission().
 */
function sessions_permission() {
  return array(
    'administer sessions' => array(
      'title' => t('Administer Sessions'),
      'description' => t('Perform administration tasks on sessions.'),
    ),
  );
}


function sessions_menu() {
  $items = array();
  $custom_aliases = array('code', 'biz', 'pa');
  $items['admin/config/sessions'] = array(
    'title' => 'Sessions',
    'description' => 'Manage sessions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sessions_admin_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'sessions.admin.inc',
    'access arguments' => array('administer sessions')
  );
  
  foreach ($custom_aliases as $alias) {
    $items['sessioni/'.$alias] = array(
      'page callback' => 'sessions_alias_redirect',
      'page arguments' =>  array(1),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content')
    );
  }  
  return $items;
}



function sessions_alias_redirect($alias = null) {
  // redirect $_GET parameter to the aliased path
  $tracks = drupal_map_assoc(array('code', 'biz', 'pa'));
  if ($track = $_GET['track']) {
    if ($tracks[$track]) {
      drupal_goto('sessioni/'.$_GET['track']);
    }
  }
  if ($alias) {
    $_GET['track'] = $alias;
  }
  $view_name = 'sessions_schedule'; //name of view
  $view = views_get_view($view_name);
  $view->set_display('page');
  return $view->render();
//  drupal_goto(url('sessioni', array('query' => array('track' => $alias), 'absolute' => true)));
}

/**
 * Implements of hook_menu_alter()
 */
function sessions_menu_alter(&$items) {
  $items['user/%/schedule']['access callback'] = $items['user/%/sessions']['access callback'] = array('sessions_access');
  $items['user/%/schedule']['access arguments'] = $items['user/%/sessions']['access arguments'] = array(1);
  
  $items['node/add/session']['access callback'] = 'user_access';
  $items['node/add/session']['access arguments'] = array('access content');
  $items['node/add/session']['page callback'] = 'session_node_add';
  unset($items['node/add/session']['file']);   unset($items['node/add/session']['module']);
  
  // sessioni redirect
  $items['sessioni']['page callback'] = 'sessions_alias_redirect';
  $items['sessioni']['page arguments'] = array();
}

function session_node_add() {
  module_load_include('inc', 'node', 'node.pages');
  global $user;
  if (!$user->uid || (!node_access('create', 'session'))) {
    return drupal_access_denied();
  }
  else {
    return node_add('session');
  }
}

// Check if this user is able to update this user profile 
function sessions_access($uid) {
  $account = user_load($uid);
  return user_edit_access($account);
}

/* Implementation of hook_views_post_build() */
function sessions_views_pre_build(&$view) {
  if ($view->name == 'sessions_schedule') {
    $input = $view->get_exposed_input();
    if ($input && $input['track']) {
      $title = 'Sessioni &raquo; ' . $input['track'];
      $view->display_handler->set_option('title', $title);
    }
  }
}


function sessions_theme($existing, $type, $theme, $path) {
  $items['views_view_unformatted__sessions_schedule'] = array(
    'template'  => 'views-view-unformatted--sessions-schedule',
    'base hook' => 'views_view_unformatted',
    'variables' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
    'path' => drupal_get_path('module', 'sessions').'/templates'
  );  
  $items['views_view_field__field_session_status'] = array(
    'template'  => 'views-view-field--field-session-status',
    'base hook' => 'views_view_field',
    'variables' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
    'path' => drupal_get_path('module', 'sessions').'/templates'
   );
  $items['sessions_select_as_radios'] = array(
    'function' => 'theme_sessions_select_as_radios',
    'render element' => 'element',
    'file' => 'sessions.theme'
  );
  $items['sessions_form_element'] = array(
    'function' => 'theme_sessions_form_element',
    'render element' => 'element',
    'file' => 'sessions.theme'
  );
  return $items;
}

/**
 *  Implements hook_form_alter()
 */
function sessions_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'session_node_form') {
    // force title
    drupal_set_title('Proponi un talk');
    // hide some fields for authenticated users
    if (!user_access('administer content')) {
      $language = $form_state['node']->language;
      
      $form['field_session_room']['#access'] = false;
      $form['field_session_timeslot']['#access'] = false;
      //$form['field_session_track']['#access'] = false;
      
      // sesssion status (force to Proposed for authenticated users)
      // multilanguage fields alter: http://timonweb.com/how-remove-format-options-guideliness-comments-textarea-drupal-7#comment-4611
      $form['field_session_status'][$form['field_session_status']['#language']]['#type'] = 'hidden';
      $form['field_session_status'][$form['field_session_status']['#language']]['#value'] = '0';
      // hack to hide group fieldset 
      // @todo make this code better!
      $form['#groups']['group_session_schedule_info']->format_type = 'hidden';
    }
    // set as default presenter the logged user
    $form['field_session_presenters']['und'][0]['uid']['#default_value'] = $user->uid;
  }
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-sessions-schedule-page') {
    $form['track']['#options']['All'] = t('All');
    $form['track']['#theme'] = array('sessions_select_as_radios');
  }
}


function sessions_preprocess_node(&$vars) {
 if ($vars['node']->type == SESSIONS_CTYPE) {
   global $user;
   $node = $vars['node'];
   
   // grant access ever to administrators and user's own sessions status
   $access = (user_access('administer sessions') || ($node->uid == $user->uid)) ? 1 : variable_get('sessions_status_check', 0);
   
   if (!$access) {
     hide($vars['content']['field_session_status']);
   }
 }
}


/*
* Conditional check for node session and filter tracks (?track=)
*/ 
function _session_conditional_check($node = null) {
  global $language;
  $tracks = drupal_map_assoc(array('code', 'biz', 'pa'));
  // change logo if ?track is enabled
  $node_track = ($node && $node->type == SESSIONS_CTYPE && $node->field_session_track[$language->language][0]['value'] ? 
                 $node->field_session_track[$language->language][0]['value'] : '');  
  // check track paramenter
  $filter = (isset($_GET['track']) ? $_GET['track'] : $node_track); 
  if (($filter && $tracks[$filter]))  {
    return $filter;
  }
}


/*
* Implementation of hook_preprocess_page()
*/
function sessions_preprocess_page(&$vars) {
  $node = &$vars['node'];
  if ($filter = _session_conditional_check($node)) {
    $vars['logo'] = url(drupal_get_path('theme', 'dday').'/images/logo_'.$filter.'.png', array('absolute' => true));
  } 
}

/**
 * Implementation of hook_preprocess_block()
 */
function sessions_preprocess_block(&$vars) {
  $block = $vars['block'];
  if ($block->module == 'block' && $block->bid == 'block-1') {
    $node = menu_get_object();
    if ($filter = _session_conditional_check($node)) {
      $vars['classes_array'][] = 'block_session_logotipo_'.$filter;
      unset($vars['content']);
    }
    else {
      $vars['classes_array'][] = 'block_session_logotipo_standard';
    }
  }
  if ($block->module == 'boxes' && $block->bid == 'boxes-join_button') {
    $node = menu_get_object();
    if ($filter = _session_conditional_check($node)) {
      unset($vars['block']);
      unset($vars['content']); 
    }
  }
}
